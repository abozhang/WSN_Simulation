//
// Generated file, do not edit! Created by opp_msgtool 6.1 from protocols/WSNMessages.msg.
//

#ifndef __WSN_SIMULATION_WSNMESSAGES_M_H
#define __WSN_SIMULATION_WSNMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace wsn_simulation {

class BaseMessage;
class TimeMessage;
class TimeCalibrationMessage;
class StatusMessage;
class StatusAggregationMessage;
class ManagementCommand;
class ClusterAddressingMessage;
class InterClusterAddressingMessage;
class WaveformConfigMessage;
class SpaceTimeSyncMessage;

}  // namespace wsn_simulation


namespace wsn_simulation {

/**
 * Class generated from <tt>protocols/WSNMessages.msg:19</tt> by opp_msgtool.
 * <pre>
 * // 基础消息
 * message BaseMessage
 * {
 *     int srcId;                // 源节点ID
 *     int destId = -1;          // 目标节点ID (-1表示广播)
 *     int frequency;            // 使用的频段
 *     int sequenceNumber;       //消息序列号
 *     double timestamp;         // 消息生成时间戳
 *     int messageType;          // 消息类型
 *     int hopCount = 0;         // 跳数计数
 * }
 * </pre>
 */
class BaseMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;

  private:
    void copy(const BaseMessage& other);

  protected:
    bool operator==(const BaseMessage&) = delete;

  public:
    BaseMessage(const char *name=nullptr, short kind=0);
    BaseMessage(const BaseMessage& other);
    virtual ~BaseMessage();
    BaseMessage& operator=(const BaseMessage& other);
    virtual BaseMessage *dup() const override {return new BaseMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BaseMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BaseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:31</tt> by opp_msgtool.
 * <pre>
 * // 时间消息
 * message TimeMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     double referenceTime;     // 基准时间(ms级)
 *     double accuracy;          // 精度等级
 *     string identityInfo;      // 身份标识
 * }
 * </pre>
 */
class TimeMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    double referenceTime = 0;
    double accuracy = 0;
    ::omnetpp::opp_string identityInfo;

  private:
    void copy(const TimeMessage& other);

  protected:
    bool operator==(const TimeMessage&) = delete;

  public:
    TimeMessage(const char *name=nullptr, short kind=0);
    TimeMessage(const TimeMessage& other);
    virtual ~TimeMessage();
    TimeMessage& operator=(const TimeMessage& other);
    virtual TimeMessage *dup() const override {return new TimeMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getReferenceTime() const;
    virtual void setReferenceTime(double referenceTime);

    virtual double getAccuracy() const;
    virtual void setAccuracy(double accuracy);

    virtual const char * getIdentityInfo() const;
    virtual void setIdentityInfo(const char * identityInfo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TimeMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TimeMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:47</tt> by opp_msgtool.
 * <pre>
 * // 校时消息
 * message TimeCalibrationMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     double sendTime;          // 发送时间(ns级)
 *     double receiveTime;       // 接收时间(ns级)
 *     double accuracy;          // 精度等级
 *     int calibrationType;      // 校准类型
 * }
 * </pre>
 */
class TimeCalibrationMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    double sendTime = 0;
    double receiveTime = 0;
    double accuracy = 0;
    int calibrationType = 0;

  private:
    void copy(const TimeCalibrationMessage& other);

  protected:
    bool operator==(const TimeCalibrationMessage&) = delete;

  public:
    TimeCalibrationMessage(const char *name=nullptr, short kind=0);
    TimeCalibrationMessage(const TimeCalibrationMessage& other);
    virtual ~TimeCalibrationMessage();
    TimeCalibrationMessage& operator=(const TimeCalibrationMessage& other);
    virtual TimeCalibrationMessage *dup() const override {return new TimeCalibrationMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getSendTime() const;
    virtual void setSendTime(double sendTime);

    virtual double getReceiveTime() const;
    virtual void setReceiveTime(double receiveTime);

    virtual double getAccuracy() const;
    virtual void setAccuracy(double accuracy);

    virtual int getCalibrationType() const;
    virtual void setCalibrationType(int calibrationType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TimeCalibrationMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TimeCalibrationMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:64</tt> by opp_msgtool.
 * <pre>
 * // 态势消息
 * message StatusMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     double positionX;         // 地理位置X坐标
 *     double positionY;         // 地理位置Y坐标
 *     double positionZ;         // 地理位置Z坐标
 *     int nodeType;             // 网络责任标识 (控制/簇头/中继/普通成员)
 *     int status;               // 节点状态
 *     int messageFrequency;     // 运行频段
 *     double batteryLevel;      // 电池电量
 * }
 * </pre>
 */
class StatusMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    double positionX = 0;
    double positionY = 0;
    double positionZ = 0;
    int nodeType = 0;
    int status = 0;
    int messageFrequency = 0;
    double batteryLevel = 0;

  private:
    void copy(const StatusMessage& other);

  protected:
    bool operator==(const StatusMessage&) = delete;

  public:
    StatusMessage(const char *name=nullptr, short kind=0);
    StatusMessage(const StatusMessage& other);
    virtual ~StatusMessage();
    StatusMessage& operator=(const StatusMessage& other);
    virtual StatusMessage *dup() const override {return new StatusMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);

    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);

    virtual double getPositionZ() const;
    virtual void setPositionZ(double positionZ);

    virtual int getNodeType() const;
    virtual void setNodeType(int nodeType);

    virtual int getStatus() const;
    virtual void setStatus(int status);

    virtual int getMessageFrequency() const;
    virtual void setMessageFrequency(int messageFrequency);

    virtual double getBatteryLevel() const;
    virtual void setBatteryLevel(double batteryLevel);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StatusMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StatusMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:84</tt> by opp_msgtool.
 * <pre>
 * // 态势汇聚消息
 * message StatusAggregationMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     int nodeCount;            // 本周期内接收的成员态势信息数量
 *     int activeNodes;          // 活跃节点数量
 *     string resourceUsage;     // 周期内资源使用情况
 * }
 * </pre>
 */
class StatusAggregationMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    int nodeCount = 0;
    int activeNodes = 0;
    ::omnetpp::opp_string resourceUsage;

  private:
    void copy(const StatusAggregationMessage& other);

  protected:
    bool operator==(const StatusAggregationMessage&) = delete;

  public:
    StatusAggregationMessage(const char *name=nullptr, short kind=0);
    StatusAggregationMessage(const StatusAggregationMessage& other);
    virtual ~StatusAggregationMessage();
    StatusAggregationMessage& operator=(const StatusAggregationMessage& other);
    virtual StatusAggregationMessage *dup() const override {return new StatusAggregationMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getNodeCount() const;
    virtual void setNodeCount(int nodeCount);

    virtual int getActiveNodes() const;
    virtual void setActiveNodes(int activeNodes);

    virtual const char * getResourceUsage() const;
    virtual void setResourceUsage(const char * resourceUsage);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StatusAggregationMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StatusAggregationMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:100</tt> by opp_msgtool.
 * <pre>
 * // 网络管理指令
 * message ManagementCommand
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     int targetId;             // 目标编识号
 *     int commandType;          // 网络执行标识类型
 *     double extensionParam;    // 延时/延时执行标识
 *     string commandData;       // 变更责任标识
 *     int responseFlag;         // 需要应答标识
 * }
 * </pre>
 */
class ManagementCommand : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    int targetId = 0;
    int commandType = 0;
    double extensionParam = 0;
    ::omnetpp::opp_string commandData;
    int responseFlag = 0;

  private:
    void copy(const ManagementCommand& other);

  protected:
    bool operator==(const ManagementCommand&) = delete;

  public:
    ManagementCommand(const char *name=nullptr, short kind=0);
    ManagementCommand(const ManagementCommand& other);
    virtual ~ManagementCommand();
    ManagementCommand& operator=(const ManagementCommand& other);
    virtual ManagementCommand *dup() const override {return new ManagementCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getTargetId() const;
    virtual void setTargetId(int targetId);

    virtual int getCommandType() const;
    virtual void setCommandType(int commandType);

    virtual double getExtensionParam() const;
    virtual void setExtensionParam(double extensionParam);

    virtual const char * getCommandData() const;
    virtual void setCommandData(const char * commandData);

    virtual int getResponseFlag() const;
    virtual void setResponseFlag(int responseFlag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ManagementCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ManagementCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:118</tt> by opp_msgtool.
 * <pre>
 * // 簇内寻址消息
 * message ClusterAddressingMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     string sourceIdentity;    // 源发端标识号
 *     string targetIdentity;    // 目标编识号
 *     string addressingQuery;   // 簇内寻址查询
 * }
 * </pre>
 */
class ClusterAddressingMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    ::omnetpp::opp_string sourceIdentity;
    ::omnetpp::opp_string targetIdentity;
    ::omnetpp::opp_string addressingQuery;

  private:
    void copy(const ClusterAddressingMessage& other);

  protected:
    bool operator==(const ClusterAddressingMessage&) = delete;

  public:
    ClusterAddressingMessage(const char *name=nullptr, short kind=0);
    ClusterAddressingMessage(const ClusterAddressingMessage& other);
    virtual ~ClusterAddressingMessage();
    ClusterAddressingMessage& operator=(const ClusterAddressingMessage& other);
    virtual ClusterAddressingMessage *dup() const override {return new ClusterAddressingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual const char * getSourceIdentity() const;
    virtual void setSourceIdentity(const char * sourceIdentity);

    virtual const char * getTargetIdentity() const;
    virtual void setTargetIdentity(const char * targetIdentity);

    virtual const char * getAddressingQuery() const;
    virtual void setAddressingQuery(const char * addressingQuery);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClusterAddressingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClusterAddressingMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:134</tt> by opp_msgtool.
 * <pre>
 * // 簇间寻址消息
 * message InterClusterAddressingMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     string sourceCluster;     // 源发端簇标识号
 *     string targetCluster;     // 目标簇标识号
 *     string addressingQuery;   // 簇间寻址查询
 * }
 * </pre>
 */
class InterClusterAddressingMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    ::omnetpp::opp_string sourceCluster;
    ::omnetpp::opp_string targetCluster;
    ::omnetpp::opp_string addressingQuery;

  private:
    void copy(const InterClusterAddressingMessage& other);

  protected:
    bool operator==(const InterClusterAddressingMessage&) = delete;

  public:
    InterClusterAddressingMessage(const char *name=nullptr, short kind=0);
    InterClusterAddressingMessage(const InterClusterAddressingMessage& other);
    virtual ~InterClusterAddressingMessage();
    InterClusterAddressingMessage& operator=(const InterClusterAddressingMessage& other);
    virtual InterClusterAddressingMessage *dup() const override {return new InterClusterAddressingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual const char * getSourceCluster() const;
    virtual void setSourceCluster(const char * sourceCluster);

    virtual const char * getTargetCluster() const;
    virtual void setTargetCluster(const char * targetCluster);

    virtual const char * getAddressingQuery() const;
    virtual void setAddressingQuery(const char * addressingQuery);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InterClusterAddressingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InterClusterAddressingMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:150</tt> by opp_msgtool.
 * <pre>
 * // 波形参数设置消息
 * message WaveformConfigMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     int waveformType;         // 波形参数标识 (比如: 速率档位)
 *     double parameterValue;    // 参数值
 *     int configResponse;       // 应答标记
 * }
 * </pre>
 */
class WaveformConfigMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    int waveformType = 0;
    double parameterValue = 0;
    int configResponse = 0;

  private:
    void copy(const WaveformConfigMessage& other);

  protected:
    bool operator==(const WaveformConfigMessage&) = delete;

  public:
    WaveformConfigMessage(const char *name=nullptr, short kind=0);
    WaveformConfigMessage(const WaveformConfigMessage& other);
    virtual ~WaveformConfigMessage();
    WaveformConfigMessage& operator=(const WaveformConfigMessage& other);
    virtual WaveformConfigMessage *dup() const override {return new WaveformConfigMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getWaveformType() const;
    virtual void setWaveformType(int waveformType);

    virtual double getParameterValue() const;
    virtual void setParameterValue(double parameterValue);

    virtual int getConfigResponse() const;
    virtual void setConfigResponse(int configResponse);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaveformConfigMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaveformConfigMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>protocols/WSNMessages.msg:166</tt> by opp_msgtool.
 * <pre>
 * // 时空同步消息
 * message SpaceTimeSyncMessage
 * {
 *     int srcId;
 *     int destId = -1;
 *     int frequency;
 *     int sequenceNumber;
 *     double timestamp;
 *     int messageType;
 *     int hopCount = 0;
 * 
 *     double referenceX;        // 参考X坐标
 *     double referenceY;        // 参考Y坐标
 *     double referenceZ;        // 参考Z坐标
 *     double referenceTime;     // 参考时间
 *     int syncType;             // 同步类型
 * }
 * </pre>
 */
class SpaceTimeSyncMessage : public ::omnetpp::cMessage
{
  protected:
    int srcId = 0;
    int destId = -1;
    int frequency = 0;
    int sequenceNumber = 0;
    double timestamp = 0;
    int messageType = 0;
    int hopCount = 0;
    double referenceX = 0;
    double referenceY = 0;
    double referenceZ = 0;
    double referenceTime = 0;
    int syncType = 0;

  private:
    void copy(const SpaceTimeSyncMessage& other);

  protected:
    bool operator==(const SpaceTimeSyncMessage&) = delete;

  public:
    SpaceTimeSyncMessage(const char *name=nullptr, short kind=0);
    SpaceTimeSyncMessage(const SpaceTimeSyncMessage& other);
    virtual ~SpaceTimeSyncMessage();
    SpaceTimeSyncMessage& operator=(const SpaceTimeSyncMessage& other);
    virtual SpaceTimeSyncMessage *dup() const override {return new SpaceTimeSyncMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcId() const;
    virtual void setSrcId(int srcId);

    virtual int getDestId() const;
    virtual void setDestId(int destId);

    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getReferenceX() const;
    virtual void setReferenceX(double referenceX);

    virtual double getReferenceY() const;
    virtual void setReferenceY(double referenceY);

    virtual double getReferenceZ() const;
    virtual void setReferenceZ(double referenceZ);

    virtual double getReferenceTime() const;
    virtual void setReferenceTime(double referenceTime);

    virtual int getSyncType() const;
    virtual void setSyncType(int syncType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SpaceTimeSyncMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SpaceTimeSyncMessage& obj) {obj.parsimUnpack(b);}


}  // namespace wsn_simulation


namespace omnetpp {

template<> inline wsn_simulation::BaseMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::BaseMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::TimeMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::TimeMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::TimeCalibrationMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::TimeCalibrationMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::StatusMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::StatusMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::StatusAggregationMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::StatusAggregationMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::ManagementCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::ManagementCommand*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::ClusterAddressingMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::ClusterAddressingMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::InterClusterAddressingMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::InterClusterAddressingMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::WaveformConfigMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::WaveformConfigMessage*>(ptr.get<cObject>()); }
template<> inline wsn_simulation::SpaceTimeSyncMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<wsn_simulation::SpaceTimeSyncMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __WSN_SIMULATION_WSNMESSAGES_M_H

